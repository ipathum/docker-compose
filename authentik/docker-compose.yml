---

services:
  postgresql:
    image: docker.io/library/postgres:16.4 # <-- check the new version if available.
    container_name: authentik-db
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD} # <-- this will add to .env file
      - POSTGRES_USER=${POSTGRES_USER} # <-- this will add to .env file
      - POSTGRES_DB=${POSTGRES_DB} # <-- this will add to .env file
    networks:
      - your-network # <---Add your network name here
  redis:
    image: docker.io/library/redis:7.4.0 # <-- check the new version if available.
    container_name: authentik-redis
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
    networks:
      - your-network # <---Add your network name here
  server:
    image: ghcr.io/goauthentik/server:2024.6.3 # <-- check the new version if available.
    container_name: authentik-server
    restart: unless-stopped
    command: server
    environment:
      - AUTHENTIK_REDIS__HOST=authentik-redis
      - AUTHENTIK_POSTGRESQL__HOST=authentik-db
      - AUTHENTIK_POSTGRESQL__USER=${POSTGRES_USER:-authentik}
      - AUTHENTIK_POSTGRESQL__NAME=${POSTGRES_DB:-authentik}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${POSTGRES_PASSWORD:?error}
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY:?error} # <-- this will add to .env file
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authentik-server.entrypoints=http"
      - "traefik.http.routers.authentik-server.rule=Host(`auth.yourdomain.com`)" # <-- change your domain here
      - "traefik.http.middlewares.authentik-server-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.authentik-server.middlewares=authentik-server-https-redirect"
      - "traefik.http.routers.authentik-server-secure.entrypoints=https"
      - "traefik.http.routers.authentik-server-secure.rule=Host(`auth.yourdomain.com`)" # <-- change your domain here
      - "traefik.http.routers.authentik-server-secure.tls=true"
      - "traefik.http.routers.authentik-server-secure.service=authentik-server"
      - "traefik.http.services.authentik-server.loadbalancer.server.port=9000"
      - "traefik.docker.network=your-network" # <---Add your network name here
    depends_on:
      - postgresql
      - redis
    networks:
      - your-network # <---Add your network name here
  worker:
    image: ghcr.io/goauthentik/server:2024.6.3 # <-- check the new version if available.
    container_name: authentik-worker
    restart: unless-stopped
    command: worker
    environment:
      - AUTHENTIK_REDIS__HOST=authentik-redis
      - AUTHENTIK_POSTGRESQL__HOST=authentik-db
      - AUTHENTIK_POSTGRESQL__USER=${POSTGRES_USER:-authentik}
      - AUTHENTIK_POSTGRESQL__NAME=${POSTGRES_DB:-authentik}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${POSTGRES_PASSWORD:?error}
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY:?error}
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    depends_on:
      - postgresql
      - redis
    networks:
      - your-network # <---Add your network name here

volumes:
  database:
    driver: local
  redis:
    driver: local
networks:
  your-network: # <---Add your network name here
    external: true
